# Generated by Django 5.1.7 on 2025-03-23 09:05

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('order_batch', models.CharField(blank=True, db_index=True, max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Batch number must be alphanumeric', regex='^[a-zA-Z0-9]*$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SkeletonProduct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sk_number', models.CharField(help_text='Skeleton product number (Format: GRH followed by 6 digits)', max_length=9, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_sk_number', message='Skeleton number must start with GRH followed by 6 digits', regex='^GRH\\d{6}$')])),
                ('perpendiculartity', models.FloatField(help_text='Rb measurement (0-0.25)', validators=[django.core.validators.MinValueValidator(0.0, message='Value must be greater than or equal to 0'), django.core.validators.MaxValueValidator(0.25, message='Value must be less than or equal to 0.25')])),
                ('flatness', models.FloatField(help_text='flatness measurement (0-0.15)', validators=[django.core.validators.MinValueValidator(0.0, message='Value must be greater than or equal to 0'), django.core.validators.MaxValueValidator(0.15, message='Value must be less than or equal to 0.15')])),
                ('length', models.FloatField(help_text='length measurement (3972.5-3974.1)', validators=[django.core.validators.MinValueValidator(3972.5, message='Value must be greater than or equal to 3972.5'), django.core.validators.MaxValueValidator(3974.1, message='Value must be less than or equal to 3974.1')])),
                ('leg1_length', models.FloatField(help_text='leg1 length measurement (-136.0:-130.0)', null=True, validators=[django.core.validators.MinValueValidator(-136.0, message='Value must be greater than or equal to -136.0'), django.core.validators.MaxValueValidator(-130.0, message='Value must be less than or equal to -130.0')])),
                ('leg2_length', models.FloatField(help_text='leg2 length measurement (-136.0:-130.0)', null=True, validators=[django.core.validators.MinValueValidator(-136.0, message='Value must be greater than or equal to -136.0'), django.core.validators.MaxValueValidator(-130.0, message='Value must be less than or equal to -130.0')])),
                ('leg3_length', models.FloatField(help_text='leg3 length measurement (-136.0:-130.0)', null=True, validators=[django.core.validators.MinValueValidator(-136.0, message='Value must be greater than or equal to -136.0'), django.core.validators.MaxValueValidator(-130.0, message='Value must be less than or equal to -130.0')])),
                ('leg4_length', models.FloatField(help_text='leg4 length measurement (-136.0:-130.0)', null=True, validators=[django.core.validators.MinValueValidator(-136.0, message='Value must be greater than or equal to -136.0'), django.core.validators.MaxValueValidator(-130.0, message='Value must be less than or equal to -130.0')])),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('CMM', 'CMM checked'), ('Laboratory', 'Laboratory Checking'), ('Customer', 'Customer Checking'), ('Released', 'QC Released'), ('Rejected', 'Rejected'), ('Used', 'Used')], default='Used', max_length=20)),
                ('type', models.CharField(choices=[('AFA3G_AA', 'AFA3G_AA_M5'), ('AFA3G_A', 'AFA3G_A_Zry4')], default='AFA3G_AA', max_length=20)),
                ('platform', models.CharField(choices=[('A', 'A'), ('B', 'B')], default='A', max_length=20)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='skeleton.order')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReleaseMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('skeleton', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='release_membership', to='skeleton.skeletonproduct', verbose_name='Skeleton')),
            ],
            options={
                'verbose_name': 'Release Membership',
                'verbose_name_plural': 'Release Memberships',
            },
        ),
        migrations.CreateModel(
            name='SkeletonRelease',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('release_number', models.CharField(help_text='Format: XX-XX-XX/YYY', max_length=100, unique=True, verbose_name='Release Number')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skeletons', models.ManyToManyField(related_name='releases', through='skeleton.ReleaseMembership', to='skeleton.skeletonproduct', verbose_name='Released Skeletons')),
            ],
            options={
                'verbose_name': 'Skeleton Release',
                'verbose_name_plural': 'Skeleton Releases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='releasemembership',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='skeleton.skeletonrelease', verbose_name='Release'),
        ),
        migrations.AlterUniqueTogether(
            name='releasemembership',
            unique_together={('release', 'skeleton')},
        ),
    ]
